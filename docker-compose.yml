services:
  read:
    image: grafana/loki:3.0.0
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - "3101:3100"
      - "7946"
      - "9095"
    volumes:
      - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      bank-loan:
        aliases:
          - loki

  write:
    image: grafana/loki:3.0.0
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - "3102:3100"
      - "7946"
      - "9095"
    volumes:
      - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy-dev:latest
    volumes:
      - ./observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    networks:
      - bank-loan

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - bank-loan

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
          - name: Loki
            type: loki
            access: proxy
            url: http://gateway:3100
            jsonData:
              httpHeaderName1: "X-Scope-OrgID"
            secureJsonData:
              httpHeaderValue1: "tenant1"
        EOF
        /run.sh
    ports:
      - "3000:3000"
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bank-loan

  backend:
    image: grafana/loki:3.0.0
    volumes:
      - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    networks:
      - bank-loan


  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bank-loan

  rabbitmq:
    image: "rabbitmq:3.13.4-management"
    container_name: rabbitmq
    hostname: "rabbitmq"
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - bank-loan

  accounts-db:
    image: postgres
    container_name: accountsdb
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: accountsdb
    networks:
      - accounts-db

  cards-db:
    image: postgres
    container_name: cardsdb
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: cardsdb
    networks:
      - cards-db

  loans-db:
    image: postgres
    container_name: loansdb
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: loansdb
    networks:
      - loans-db


  config-server:
    image: "helmyl/config-server"
    container_name: config-server
    ports:
      - "8071:8071"
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - bank-loan
    environment:
      SPRING_RABBITMQ_HOST: "rabbitmq"

  eureka-server:
    image: "helmyl/eureka-server"
    container_name: eureka-server
    ports:
      - "8070:8070"
    depends_on:
      config-server:
        condition: service_healthy
    environment:
      SPRING_CONFIG_IMPORT: configserver:http://config-server:8071/
      SPRING_RABBITMQ_HOST: "rabbitmq"
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - bank-loan


  cards:
    image: "helmyl/cards-ms"
    container_name: cards-ms
    ports:
      - "9000:9000"
    healthcheck:
      test: "curl --fail --silent localhost:9000/actuator/health/readiness | grep UP || exit 1"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    depends_on:
      config-server:
        condition: service_healthy
    environment:
      SPRING_CONFIG_IMPORT: configserver:http://config-server:8071/
      SPRING_RABBITMQ_HOST: "rabbitmq"
      SPRING_DATASOURCE_URL: jdbc:postgresql://cards-db:5432/cardsdb
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8070/eureka/
    networks:
      - bank-loan
      - cards-db

  loans:
    image: "helmyl/loans-ms"
    container_name: loans-ms
    ports:
      - "8090:8090"
    healthcheck:
      test: "curl --fail --silent localhost:8090/actuator/health/readiness | grep UP || exit 1"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    depends_on:
      config-server:
        condition: service_healthy
    environment:
      SPRING_CONFIG_IMPORT: configserver:http://config-server:8071/
      SPRING_RABBITMQ_HOST: "rabbitmq"
      SPRING_DATASOURCE_URL: jdbc:postgresql://loans-db:5432/loansdb
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8070/eureka/
    networks:
      - bank-loan
      - loans-db

  accounts:
    image: "helmyl/accounts-ms"
    container_name: accounts-ms
    ports:
      - "8080:8080"
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    depends_on:
      cards:
        condition: service_started
      loans:
        condition: service_started
    environment:
      SPRING_CONFIG_IMPORT: configserver:http://config-server:8071/
      SPRING_RABBITMQ_HOST: "rabbitmq"
      SPRING_DATASOURCE_URL: jdbc:postgresql://accounts-db:5432/accountsdb
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8070/eureka/
    networks:
      - bank-loan
      - accounts-db
      - cards-db
      - loans-db

  gateway-server:
    image: "helmyl/gateway-server"
    container_name: gateway-server
    ports:
      - "8072:8072"
    depends_on:
      accounts:
        condition: service_started
    environment:
      SPRING_CONFIG_IMPORT: configserver:http://config-server:8071/
      SPRING_RABBITMQ_HOST: "rabbitmq"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8070/eureka/
    networks:
      - bank-loan
      - accounts-db
      - cards-db
      - loans-db

networks:
  bank-loan:
    driver: bridge
  accounts-db:
    driver: bridge
  cards-db:
    driver: bridge
  loans-db:
    driver: bridge
